message("${CMAKE_MODULE_PATH}")
include(cmake_test/cmake_test)
ct_add_test("subtract_time")
    include(timer/subtract_time)
    ct_add_section("borrow_from_days")
        set(days 1)
        set(hours 2)
        _borrow_from_days(days hours)
        ct_assert_equal(days 0)
        ct_assert_equal(hours 26)
    ct_end_section()

    ct_add_section("borrow_from_hours")
        set(days 1)
        set(mins 3)

        ct_add_section("no need to borrow from days")
            set(hours 1)
            _borrow_from_hours(days hours mins)
            ct_assert_equal(days 1)
            ct_assert_equal(hours 0)
            ct_assert_equal(mins 63)
        ct_end_section()

        ct_add_section("need to borrow from days")
            set(hours 0)
            _borrow_from_hours(days hours mins)
            ct_assert_equal(days 0)
            ct_assert_equal(hours 23)
            ct_assert_equal(mins 63)
        ct_end_section()
    ct_end_section()

    ct_add_section("borrow_from_minutes")
        set(days 1)
        set(secs 3)

        ct_add_section("no need to borrow from days or hours")
            set(hours 1)
            set(mins 1)
            _borrow_from_minutes(days hours mins secs)
            ct_assert_equal(days 1)
            ct_assert_equal(hours 1)
            ct_assert_equal(mins 0)
            ct_assert_equal(secs 63)
        ct_end_section()

        ct_add_section("need to borrow from hours")
            set(hours 1)
            set(mins 0)
            _borrow_from_minutes(days hours mins secs)
            ct_assert_equal(days 1)
            ct_assert_equal(hours 0)
            ct_assert_equal(mins 59)
            ct_assert_equal(secs 63)
        ct_end_section()

        ct_add_section("need to borrow from hours and days")
            set(hours 0)
            set(mins 0)
            _borrow_from_minutes(days hours mins secs)
            ct_assert_equal(days 0)
            ct_assert_equal(hours 23)
            ct_assert_equal(mins 59)
            ct_assert_equal(secs 63)
        ct_end_section()

    ct_end_section()

    ct_add_section("cmakepp_timer_parse_stamp")
        ct_add_section("good stamp")
            _cmakepp_timer_parse_stamp(day hour min sec "001:02:03:04")
            ct_assert_equal(day 001)
            ct_assert_equal(hour 02)
            ct_assert_equal(min 03)
            ct_assert_equal(sec 04)
        ct_end_section()

        ct_add_section("bad stamp")
            _cmakepp_timer_parse_stamp(day hour min sec "1:2:3:4")
            ct_assert_fails_as("Timestamp: 1:2:3:4 has incorrect format.")
        ct_end_section()
    ct_end_section()

    ct_add_section("_subtract_timestamps")
        ct_add_section("final day less than initial")
            _subtract_timestamps(dt "001:02:03:04" "002:02:03:04")
            ct_assert_fails_as("Do not yet support subtracting across years.")
        ct_end_section()

        ct_add_section("no carrying required")
            _subtract_timestamps(dt "002:02:02:02" "001:01:01:01")
            ct_assert_equal(dt 90061)
        ct_end_section()

        ct_add_section("Carry from minutes")
            _subtract_timestamps(dt "001:01:02:01" "001:01:01:02")
            ct_assert_equal(dt 59)
        ct_end_section()

        ct_add_section("Carry from hours")
            _subtract_timestamps(dt "001:02:01:04" "001:01:02:04")
            ct_assert_equal(dt 3540)
        ct_end_section()

        ct_add_section("Carry from days")
            _subtract_timestamps(dt "002:01:02:04" "001:02:02:04")
            ct_assert_equal(dt 82800)
        ct_end_section()
    ct_end_section()
ct_end_test()

